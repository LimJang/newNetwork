// Network-based RPG Client\nlet rpgSocket = null;\nlet rpgEngine = null;\nlet rpgRenderer = null;\nlet isRPGConnected = false;\nlet rpgAnimationId = null;\n\n// DOM elements\nconst connectRPGBtn = document.getElementById('connectRPGBtn');\nconst respawnBtn = document.getElementById('respawnBtn');\nconst rpgStatus = document.getElementById('rpgStatus');\nconst userCount = document.getElementById('userCount');\nconst tickCount = document.getElementById('tickCount');\nconst fpsDisplay = document.getElementById('fpsDisplay');\nconst characterName = document.getElementById('characterName');\nconst characterPos = document.getElementById('characterPos');\nconst movingStatus = document.getElementById('movingStatus');\nconst rpgLogContainer = document.getElementById('rpgLogContainer');\nconst canvas = document.getElementById('rpgCanvas');\n\n// Initialize RPG system\nfunction initializeRPG() {\n    rpgEngine = new RPGEngine();\n    rpgRenderer = new RPGRenderer(canvas);\n    \n    // Setup mouse click handling\n    canvas.addEventListener('click', handleCanvasClick);\n    \n    // Setup movement callback\n    rpgEngine.setMouseMoveCallback(sendMovementCommand);\n    \n    addRPGLog('Medieval RPG engine initialized', 'success');\n    addRPGLog('Click \"Enter Fantasy World\" to begin your adventure!', 'info');\n}\n\n// Event listeners\nconnectRPGBtn.addEventListener('click', toggleRPGConnection);\nrespawnBtn.addEventListener('click', respawnCharacter);\n\nfunction toggleRPGConnection() {\n    if (isRPGConnected) {\n        disconnectRPG();\n    } else {\n        connectRPG();\n    }\n}\n\nfunction connectRPG() {\n    addRPGLog('Connecting to fantasy world...', 'info');\n    \n    rpgSocket = io();\n    \n    rpgSocket.on('connect', () => {\n        isRPGConnected = true;\n        updateRPGStatus(true);\n        addRPGLog('Connected to fantasy world!', 'success');\n        connectRPGBtn.innerHTML = `\n            <span class=\"button-text\">Leave Fantasy World</span>\n            <span class=\"button-subtext\">판타지 세계 나가기</span>\n        `;\n        enableRPGControls(true);\n        startRPGLoop();\n        \n        // Request to join the world\n        rpgSocket.emit('joinWorld');\n    });\n    \n    rpgSocket.on('disconnect', () => {\n        isRPGConnected = false;\n        updateRPGStatus(false);\n        addRPGLog('Disconnected from fantasy world', 'error');\n        connectRPGBtn.innerHTML = `\n            <span class=\"button-text\">Enter Fantasy World</span>\n            <span class=\"button-subtext\">판타지 세계 입장</span>\n        `;\n        enableRPGControls(false);\n        stopRPGLoop();\n        rpgEngine.stopTickSystem();\n    });\n    \n    rpgSocket.on('userCount', (count) => {\n        userCount.textContent = count;\n        addRPGLog(`Players in world: ${count}`, 'info');\n    });\n    \n    rpgSocket.on('worldState', (state) => {\n        if (rpgEngine) {\n            rpgEngine.setState(state);\n        }\n    });\n    \n    rpgSocket.on('characterJoined', (data) => {\n        if (rpgEngine) {\n            rpgEngine.addCharacter(data.character);\n            \n            if (data.character.id === rpgSocket.id) {\n                rpgEngine.myCharacterId = data.character.id;\n                addRPGLog(`Your character ${data.character.name} has entered the world!`, 'success');\n            } else {\n                addRPGLog(`${data.character.name} has joined the world`, 'info');\n            }\n        }\n    });\n    \n    rpgSocket.on('characterLeft', (data) => {\n        if (rpgEngine) {\n            rpgEngine.removeCharacter(data.characterId);\n            addRPGLog(`${data.characterName} has left the world`, 'info');\n        }\n    });\n    \n    rpgSocket.on('characterMoved', (data) => {\n        if (rpgEngine) {\n            rpgEngine.updateCharacter(data.character);\n        }\n    });\n    \n    rpgSocket.on('serverTick', (tickData) => {\n        if (rpgEngine) {\n            rpgEngine.currentTick = tickData.tick;\n            tickCount.textContent = tickData.tick;\n        }\n    });\n    \n    rpgSocket.on('connect_error', (error) => {\n        addRPGLog(`World connection error: ${error.message}`, 'error');\n    });\n}\n\nfunction disconnectRPG() {\n    if (rpgSocket) {\n        rpgSocket.disconnect();\n        rpgSocket = null;\n    }\n    stopRPGLoop();\n}\n\nfunction startRPGLoop() {\n    if (rpgAnimationId) {\n        cancelAnimationFrame(rpgAnimationId);\n    }\n    \n    // Start tick system\n    rpgEngine.startTickSystem();\n    \n    function rpgLoop() {\n        if (rpgEngine && rpgRenderer && isRPGConnected) {\n            // Render current state\n            rpgRenderer.render(rpgEngine);\n            \n            // Update displays\n            fpsDisplay.textContent = rpgRenderer.getFPS();\n            \n            // Update character info\n            const myChar = rpgEngine.getMyCharacter();\n            if (myChar) {\n                characterPos.textContent = `${myChar.x}, ${myChar.y}`;\n                movingStatus.textContent = myChar.isMoving ? 'Moving' : 'Idle';\n            }\n        }\n        \n        rpgAnimationId = requestAnimationFrame(rpgLoop);\n    }\n    \n    rpgLoop();\n}\n\nfunction stopRPGLoop() {\n    if (rpgAnimationId) {\n        cancelAnimationFrame(rpgAnimationId);\n        rpgAnimationId = null;\n    }\n}\n\nfunction handleCanvasClick(event) {\n    if (!isRPGConnected || !rpgEngine) {\n        addRPGLog('Not connected to world', 'error');\n        return;\n    }\n    \n    const rect = canvas.getBoundingClientRect();\n    const success = rpgEngine.handleMouseClick(event.clientX, event.clientY, rect);\n    \n    if (!success) {\n        addRPGLog('Cannot move to that location', 'error');\n    }\n}\n\nfunction sendMovementCommand(targetX, targetY) {\n    if (!isRPGConnected || !rpgSocket) {\n        addRPGLog('Not connected to world', 'error');\n        return;\n    }\n    \n    const myChar = rpgEngine.getMyCharacter();\n    if (!myChar) {\n        addRPGLog('Character not found', 'error');\n        return;\n    }\n    \n    rpgSocket.emit('moveCharacter', {\n        fromX: myChar.x,\n        fromY: myChar.y,\n        toX: targetX,\n        toY: targetY\n    });\n    \n    addRPGLog(`Moving to (${targetX}, ${targetY})`, 'info');\n}\n\nfunction respawnCharacter() {\n    if (!isRPGConnected || !rpgSocket) {\n        addRPGLog('Not connected to world', 'error');\n        return;\n    }\n    \n    rpgSocket.emit('respawnCharacter');\n    addRPGLog('Respawning character...', 'info');\n}\n\nfunction updateRPGStatus(connected) {\n    if (connected) {\n        rpgStatus.textContent = 'Connected';\n        rpgStatus.className = 'status-connected';\n    } else {\n        rpgStatus.textContent = 'Disconnected';\n        rpgStatus.className = 'status-disconnected';\n        userCount.textContent = '0';\n        tickCount.textContent = '0';\n        characterPos.textContent = '0, 0';\n        movingStatus.textContent = 'Idle';\n    }\n}\n\nfunction enableRPGControls(enabled) {\n    respawnBtn.disabled = !enabled;\n}\n\nfunction addRPGLog(message, type = 'info') {\n    const logEntry = document.createElement('div');\n    logEntry.className = `log-entry ${type}`;\n    \n    const timestamp = new Date().toLocaleTimeString();\n    logEntry.textContent = `[${timestamp}] ${message}`;\n    \n    rpgLogContainer.appendChild(logEntry);\n    rpgLogContainer.scrollTop = rpgLogContainer.scrollHeight;\n    \n    // Keep only last 30 log entries\n    while (rpgLogContainer.children.length > 30) {\n        rpgLogContainer.removeChild(rpgLogContainer.firstChild);\n    }\n}\n\n// Initialize when page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n    initializeRPG();\n    addRPGLog('Medieval Fantasy World ready', 'info');\n    addRPGLog('Enter the world to begin your adventure with other players', 'info');\n});